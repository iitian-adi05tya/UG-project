# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
import os
import shutil
import cv2
import tensorflow as tf
from tensorflow.keras.layers import Conv2D, Flatten, Dense, Dropout, MaxPooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.utils import resample

# Removing existing directories
shutil.rmtree("../Cancer/", ignore_errors=True)
shutil.rmtree("../Cancer_train/", ignore_errors=True)
shutil.rmtree("../Cancer_test/", ignore_errors=True)
shutil.rmtree("../Cancer_validation/", ignore_errors=True)

# Loading dataset
fold_df = pd.read_csv("../input/breakhis/Folds.csv")
fold_df = fold_df.rename(columns={"filename": "path"})

# Defining paths
img_path = "./BreaKHis_v1/"
classes = ["benign", "malignant"]

# Extracting filename and label
fold_df['filename'] = fold_df['path'].apply(lambda x: x.split("/")[-1])
fold_df['label'] = fold_df['path'].apply(lambda x: x.split("/")[3])

# Creating a new directory
os.makedirs("../Cancer/", exist_ok=True)

# Moving images to a common folder
for p in fold_df['path']:
    src = "../input/breakhis/BreaKHis_v1/" + p
    dest = os.path.join("../Cancer/", src.split("/")[7] + "_" + src.split("/")[-1])
    shutil.copyfile(src, dest)

# Creating a new dataframe with labels
fold_df['file_loc'] = fold_df['label'] + "_" + fold_df['filename']
fold_df['class'] = fold_df['label'].apply(lambda x: 0 if x == 'benign' else 1)

# Splitting data
train_and_val, test = train_test_split(fold_df, test_size=0.1, random_state=47)
train, val = train_test_split(train_and_val, test_size=0.1, random_state=47)

# Balancing training data
train_cancer = train[train['class'] == 1]
train_no_cancer = train[train['class'] == 0]
train_no_cancer_upsample = resample(train_no_cancer, n_samples=len(train_cancer), random_state=47, replace=True)
data_train = pd.concat([train_cancer, train_no_cancer_upsample])

# Creating directories
for category in ["train", "test", "validation"]:
    for label in classes:
        os.makedirs(f"../Cancer_{category}/{label}", exist_ok=True)

# Moving images to respective folders
def move_images(data, folder):
    for img in data.index:
        target = data.loc[img, 'class']
        label = 'malignant' if target == 1 else 'benign'
        src = os.path.join("../Cancer/", img)
        dest = os.path.join(f"../Cancer_{folder}/{label}/", img)
        shutil.copyfile(src, dest)

move_images(data_train, "train")
move_images(val, "validation")
move_images(test, "test")

# Image Data Generator
datagen = ImageDataGenerator(rotation_range=20, horizontal_flip=True, vertical_flip=True, rescale=1./255, shear_range=0.2, zoom_range=0.2)
train_gen = datagen.flow_from_directory("../Cancer_train/", target_size=(128,128), batch_size=32, class_mode="binary")
val_gen = datagen.flow_from_directory("../Cancer_validation/", target_size=(128,128), batch_size=32, class_mode="binary")

# CNN Model
cancer_model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    MaxPooling2D((2,2)),
    Conv2D(64, (3,3), activation='relu', padding='same'),
    MaxPooling2D((2,2)),
    Conv2D(128, (3,3), activation='relu', padding='same'),
    MaxPooling2D((2,2)),
    Dropout(0.4),
    Conv2D(256, (3,3), activation='relu', padding='same'),
    MaxPooling2D((2,2)),
    Dropout(0.2),
    Flatten(),
    Dense(256, activation='relu'),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Compiling the model
cancer_model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(), metrics=['accuracy'])
early_stop = EarlyStopping(monitor='val_loss', patience=5)
checkpoint = ModelCheckpoint("./Best_model/", save_best_only=True)

# Training the model
history = cancer_model.fit(train_gen, validation_data=val_gen, epochs=200, callbacks=[early_stop, checkpoint], verbose=1)

# Evaluating on test data
test_gen = datagen.flow_from_directory("../Cancer_test/", target_size=(128,128), class_mode="binary", batch_size=1, shuffle=False)
pred = cancer_model.evaluate(test_gen)

# Plotting results
plt.figure(figsize=(16,6))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')
plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

# Testing on random images
random_images = np.random.choice(test.index, 10)
test_images = []
test_labels = []
for img in random_images:
    label = test.loc[img, "class"]
    test_labels.append(label)
    lab = "malignant" if label == 1 else "benign"
    path = os.path.join("../Cancer_test/", lab, img)
    img_arr = cv2.imread(path)
    img_arr = cv2.resize(img_arr, (128,128))
    test_images.append(img_arr)
test_images = np.asarray(test_images) / 255.0

# Predicting
predictions = (cancer_model.predict(test_images) > 0.5).astype("int32").flatten()

# Plotting predictions
plt.figure(figsize=(20,10))
plt.suptitle("Prediction Vs Actual Result")
for i in range(10):
    plt.subplot(2,5,i+1)
    plt.imshow(test_images[i])
    plt.title(f"Actual: {test_labels[i]}, Predicted: {predictions[i]}")


**************************************************************************************************************************************************************************************************

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns 
import matplotlib.pyplot as plt
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
import warnings
warnings.filterwarnings('ignore')
df=pd.read_csv("/kaggle/input/breast-cancer-dataset/breast-cancer.csv")
df.columns
df=pd.read_csv("/kaggle/input/breast-cancer-dataset/breast-cancer.csv")
df.columns
df.isnull().sum()
df.shape
df.size
df.nunique()
df.describe()
df.corr()
plt.figure(figsize=(30,14))
sns.heatmap(df.corr(),annot=True,cmap='Reds')
sns.countplot(x='diagnosis',data=df,palette='Greens_d')

## M for Malignant
## B for Benign

sns.scatterplot(x='id',y='radius_mean',data=df,hue='diagnosis')
sns.scatterplot(x='id',y='texture_mean',data=df,hue='diagnosis')
sns.distplot(df.perimeter_mean,kde=True,color='g')
sns.distplot(df.area_mean,kde=False,color='b')
sns.regplot(x='id',y='smoothness_mean',data=df)
sns.lmplot(x='id',y='radius_worst',data=df,hue='diagnosis')
sns.distplot(df['perimeter_worst'],kde=True,color='m')
sns.scatterplot(x='id',y='area_worst',data=df,hue='diagnosis')
sns.scatterplot(x='id',y='smoothness_worst',data=df,hue='diagnosis')
df.head()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
df['diagnosis']=l.fit_transform(df.diagnosis)
df.head()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
model=RandomForestClassifier(n_estimators=100)
x=df.drop('diagnosis',axis=1)
y=df['diagnosis']
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)
model.fit(xtrain,ytrain)
y_pred=model.predict(xtest)
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score
print("model name is ",model)
print("accuracy is ",round(accuracy_score(y_pred,ytest),2)*100,'%')
print ("precision is ",round(precision_score(y_pred,ytest),2)*100,'%')
print("recall is ",round(recall_score(y_pred,ytest),2)*100,'%')
print("f1 is ",round(f1_score(y_pred,ytest),2)*100,'%')
